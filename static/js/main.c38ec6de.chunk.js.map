{"version":3,"sources":["Pages/Art/BlackGirl/blackGirl0.png","logo.svg","Pages/Art/BlackGirl/blackGirl1.png","Pages/Art/BlackGirl/blackGirl2.png","Pages/FireWatch.js","Pages/SvgTest.js","Pages/Art/BlackGirl/BlackGirl.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FireWatchImages","paralax","map","_","i","reverse","console","log","image","amount","expanded","FireWatch","ThemeProvider","className","layers","style","width","height","position","top","backgroundColor","SvgTest","y","x","tagOuter","src","alt","images","blackgirl1","blackgirl2","blackgirl3","count","size","window","outerWidth","outerHeight","onresize","resizeTo","BlackGirl","bottom","left","right","backgroundRepeat","backgroundImage","filter","App","path","Home","logo","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c38ec6de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blackGirl0.dec534f9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/blackGirl1.485e985a.png\";","module.exports = __webpack_public_path__ + \"static/media/blackGirl2.94045bd2.png\";","import React from 'react'\nimport '../App.css'\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { ParallaxBanner } from 'react-scroll-parallax';\n\n\n// const useStyles = makeStyles(theme => ({\n//   img:{\n//     background: \"transparent\",\n//     padding: 20,\n//     position: \"absolute\",\n//     top: \"50%\",\n//     left: \"50%\",\n\n//   }\n// }));\n\n\nconst FireWatchImages = [1,2,3,4,5,6,7,8,9]\nconst paralax = FireWatchImages.map((_,i)=>1-((i-8)**2)/64 -.001).reverse()\nconsole.log(FireWatchImages.map((_,i)=>({\n  image: `http://www.firewatchgame.com/images/parallax/parallax${i}@2x.png`,\n  amount: paralax[i],\n  expanded:false\n})))\nconst FireWatch = () => {\n  // const classes = useStyles();\n  return (\n    <ThemeProvider>\n      <div className=\"App\">\n        <ParallaxBanner\n          layers= {FireWatchImages.map((_,i)=>({\n            image: `http://www.firewatchgame.com/images/parallax/parallax${i}@2x.png`,\n            amount: paralax[i],\n            expanded:false\n          }))}\n          style={{\n              width:'100%',\n              height: '100%',\n              position:'absolute',\n              top:'0px'\n          }}\n        >\n        </ParallaxBanner>\n        <div \n        style={{\n            backgroundColor:\"#220002\",\n            width:'100%',\n            height: '101vh',\n            position:'absolute',\n            top:'99vh'\n          }}\n          ></div>\n      </div>\n    </ThemeProvider>\n  )\n}\n\n\nexport default FireWatch","import React from 'react'\nimport '../App.css'\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { Parallax } from 'react-scroll-parallax';\n\n\n\nconst SvgTest = () => {\n  // const classes = useStyles();\n  return (\n    <ThemeProvider>\n      <div className=\"Svg-app\">\n      <Parallax className=\"custom-class\" y={[50, -50]} x={[50, -50]} tagOuter=\"figure\">\n          <img src=\"http://www.fillmurray.com/500/320\" alt=\"fill murray\" />\n        </Parallax>\n      </div>\n    </ThemeProvider>\n  )\n}\n\n\nexport default SvgTest","import React, {useEffect} from 'react'\nimport '../../../App.css'\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { ParallaxBanner } from 'react-scroll-parallax';\nimport blackgirl1 from './blackGirl0.png'\nimport blackgirl2 from './blackGirl1.png'\nimport blackgirl3 from './blackGirl2.png'\n\n// import blackgirl2 from 'blackGirl1.png'\n// import blackgirl3 from 'blackGirl2.png'\nconst images = [blackgirl1,blackgirl2,blackgirl3]\n\n\nconst count = [1,2,3]\nconst size = [window.outerWidth,window.outerHeight]; \nwindow.onresize = () => {\n  console.log(\"resize!\",size)\n  window.resizeTo(size[0],size[1]);\n} \nconst paralax = count.map((_,i)=>1-((i-3)**2)/9 ).reverse()\nconst BlackGirl = () => {\n\n \n  return (\n    <ThemeProvider>\n      <div className=\"Black-girl\" >\n        <div \n          style={{ height:'110vh', width:'110vw',   \n          top: \"-5vh\",\n          bottom: \"-5vh\",\n          left: \"-5vw\",\n          right: \"-5vw\",\n          backgroundColor:'#937e6c',\n          backgroundRepeat: \"repeat\",\n          position:'fixed', backgroundImage:`url(${blackgirl1})`,  filter:' blur(10px)'\n        }}\n        />\n        <ParallaxBanner\n          layers= {count.map((_,i)=>({\n            image: images[i],\n            amount: paralax[i],\n            alt:\"blackgirl\",\n\n            expanded:false\n          }))}\n          style={{\n            filter:' blur(0px)',\n            backgroundColor: 'rgba(0,0,0, 0.4)', /* Black w/opacity/see-through */\n            width:'75vh',\n            height: '100vh',\n            position:'absolute',\n            top:0\n          }}\n        />\n      </div>\n    </ThemeProvider>\n  )\n}\n\n\nexport default BlackGirl","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport './App.css'\nimport logo from './logo.svg'\nimport FireWatch from './Pages/FireWatch.js'\nimport SvgTest from './Pages/SvgTest.js'\nimport BlackGirl from './Pages/Art/BlackGirl/BlackGirl.js'\n\nimport { ParallaxProvider } from 'react-scroll-parallax';\n \n\nexport default function App() {\n  return (\n    <Router>\n        <ParallaxProvider>\n          <Switch>\n            <Route path=\"/parallax/firewatch\">\n              <FireWatch />\n            </Route>\n            <Route path=\"/blackgirl\">\n              <BlackGirl />\n            </Route>\n            <Route path=\"/parallax/svg\">\n              <ParallaxProvider>\n                <SvgTest />\n              </ParallaxProvider>\n            </Route>\n            <Route path=\"/parallax\">\n              <Home />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </ParallaxProvider>\n    </Router>\n  );\n}\n\nfunction Home() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Link to='/blackgirl'> /firewatch\n        </Link>\n        <Link to='/parallax/firewatch'> /parallax/firewatch\n        </Link>\n      </header>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}